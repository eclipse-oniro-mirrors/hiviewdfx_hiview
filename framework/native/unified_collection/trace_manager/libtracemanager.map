{
  global:
    extern "C++" {
        "OHOS::DelayedRefSingleton<OHOS::HiviewDFX::TraceStateMachine>::instance_";
        "OHOS::HiviewDFX::TraceStateMachine::DumpTrace(OHOS::HiviewDFX::TraceScenario, int, unsigned long long, OHOS::HiviewDFX::Hitrace::TraceRetInfo&)";
        "OHOS::HiviewDFX::TraceStateMachine::DumpTrace(OHOS::HiviewDFX::TraceScenario, int, unsigned long, OHOS::HiviewDFX::Hitrace::TraceRetInfo&)";
        "OHOS::HiviewDFX::TraceStateMachine::TraceStateMachine()";
        "OHOS::HiviewDFX::TraceFlowController::NeedDump()";
        "OHOS::HiviewDFX::TraceFlowController::NeedUpload(long long)";
        "OHOS::HiviewDFX::TraceFlowController::NeedUpload(long)";
        "OHOS::HiviewDFX::TraceFlowController::StoreDb()";
        "OHOS::HiviewDFX::TraceFlowController::HasCallOnceToday(int, unsigned long long)";
        "OHOS::HiviewDFX::TraceFlowController::HasCallOnceToday(int, unsigned long)";
        "OHOS::HiviewDFX::TraceFlowController::RecordCaller(std::__h::shared_ptr<OHOS::HiviewDFX::AppCallerEvent>)";
        "OHOS::HiviewDFX::TraceStateMachine::CloseTrace(OHOS::HiviewDFX::TraceScenario)";
        "OHOS::HiviewDFX::TraceFlowController::CleanOldAppTrace(int)";
        "OHOS::HiviewDFX::TraceFlowController::TraceFlowController(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
        "OHOS::HiviewDFX::DynamicState::GetTaskBeginTime()";
        "OHOS::HiviewDFX::TraceStateMachine::InitOrUpdateState()";
        "OHOS::HiviewDFX::TraceStateMachine::OpenTrace(OHOS::HiviewDFX::TraceScenario, std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>> const&)";
        "OHOS::HiviewDFX::TraceStateMachine::OpenTrace(OHOS::HiviewDFX::TraceScenario, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
        "OHOS::HiviewDFX::TraceStateMachine::TraceDropOn(OHOS::HiviewDFX::TraceScenario)";
        "OHOS::HiviewDFX::TraceStateMachine::TraceDropOff(OHOS::HiviewDFX::TraceScenario, OHOS::HiviewDFX::Hitrace::TraceRetInfo&)";
        "OHOS::HiviewDFX::TraceStateMachine::OpenDynamicTrace(int)";
        "OHOS::HiviewDFX::TraceStateMachine::TraceCacheOn()";
        "OHOS::HiviewDFX::TraceStateMachine::TraceCacheOff()";
        "OHOS::HiviewDFX::TraceFlowController::UseCacheTimeQuota(int)";
        "OHOS::HiviewDFX::TraceFlowController::NeedTelemetryDump(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, long long)";
        "OHOS::HiviewDFX::TraceFlowController::NeedTelemetryDump(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, long)";
        "OHOS::HiviewDFX::TraceStateMachine::DumpTraceWithFilter(std::__h::vector<int, std::__h::allocator<int>> const&, int, unsigned long long, OHOS::HiviewDFX::Hitrace::TraceRetInfo&)";
        "OHOS::HiviewDFX::TraceStateMachine::DumpTraceWithFilter(std::__h::vector<int, std::__h::allocator<int>> const&, int, unsigned long, OHOS::HiviewDFX::Hitrace::TraceRetInfo&)";
        "OHOS::HiviewDFX::TraceStateMachine::OpenTelemetryTrace(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
        "OHOS::HiviewDFX::TraceFlowController::ClearTelemetryData()";
        "OHOS::HiviewDFX::TraceFlowController::InitTelemetryData(std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, long long, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const, long long>>> const&)";
        "OHOS::HiviewDFX::TraceFlowController::InitTelemetryData(std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, long, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const, long>>> const&)";
    };
  local:
    *;
};