# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//base/hiviewdfx/hiview/hiview.gni")
import("//build/ohos.gni")
config("event_logger_config") {
  visibility = [ "*:*" ]
  include_dirs = [
    ".",
    "include",
    "$hiview_plugin/freeze_detector",
  ]
}

ohos_source_set("eventlogger") {
  part_name = "hiview"
  subsystem_name = "hiviewdfx"
  public_configs = [ ":event_logger_config" ]

  sources = [
    "event_logger.cpp",
    "event_logger_util.cpp",
  ]

  deps = [
    "$hiview_base:hiviewbase",
    "$hiview_interfaces/inner_api/unified_collection/utility:libucollection_utility",
    "$hiview_plugin/faultlogger:libfaultlogger",
    "$hiview_plugin/freeze_detector:freeze_detector",
    "config:eventlogger_config",
    "log_catcher:log_catcher",
  ]

  external_deps = [
    "c_utils:utils",
    "faultloggerd:libjson_stack_formatter",
    "ffrt:libffrt",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libxml2:libxml2",
  ]

  defines = []
  if (window_manager_enable && hiview_eventlogger_window_manager_enable) {
    sources += [ "event_focus_listener.cpp" ]
    external_deps += [
      "window_manager:libwm",
      "window_manager:libwm_lite",
    ]
    defines += [ "WINDOW_MANAGER_ENABLE" ]
  }
  if (multimodalinput_input_enable) {
    sources += [ "active_key_event.cpp" ]
    external_deps += [ "input:libmmi-client" ]
    defines += [ "MULTIMODALINPUT_INPUT_ENABLE" ]
  }
  if (defined(global_parts_info) &&
      defined(global_parts_info.resourceschedule_soc_perf)) {
    external_deps += [ "soc_perf:socperf_client" ]
    defines += [ "SOC_PERF_ENABLE" ]
  }
  if (hiview_eventlogger_hitrace_catcher_enable) {
    defines += [ "HITRACE_CATCHER_ENABLE" ]
  }
}

ohos_shared_library("eventloggerso") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  part_name = "hiview"
  subsystem_name = "hiviewdfx"

  deps = [ ":eventlogger" ]

  external_deps = [ "hilog:libhilog" ]

  version_script = "eventlogger.map"
  subsystem_name = "hiviewdfx"
}

group("unittest") {
  testonly = true
  deps = []
  if (hiview_freeze_collect_enable) {
    deps += [
      "config/test:EventloggerConfigTest",
      "log_catcher/test:EventloggerCatcherTest",
      "test:EventLoggerTest",
    ]
    if (multimodalinput_input_enable) {
      deps += [ "test:ActiveKeyEventTest" ]
    }
  }
}

group("moduletest") {
  testonly = true
  deps = []
}
