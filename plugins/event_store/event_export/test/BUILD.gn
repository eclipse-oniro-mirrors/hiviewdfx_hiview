# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/hiviewdfx/hiview/hiview.gni")
import("//build/test.gni")

module_output_path = hiview_module + "/event_export"

group("unittest") {
  testonly = true
  deps = [
    ":EventExportConfigTest",
    ":EventExportDbMgrTest",
    ":EventExportMgrTest",
    ":EventExportWriteTest",
    ":TriggleExportTest",
  ]
}

config("event_export_config_test_config") {
  visibility = [ ":*" ]

  include_dirs = [ "unittest/common" ]

  cflags = []
}

ohos_unittest("EventExportConfigTest") {
  module_out_path = module_output_path

  configs = [ ":event_export_config_test_config" ]

  sources = [ "unittest/common/event_export_config_test.cpp" ]

  deps = [
    "$hiview_base:hiviewbase_static_lib_for_tdd",
    "../../event_export:event_export_engine",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "jsoncpp:jsoncpp",
  ]

  resource_config_file = "resource/ohos_test.xml"
}

config("event_db_mgr_test_config") {
  visibility = [ ":*" ]

  include_dirs = [ "unittest/common" ]

  cflags = []
}

ohos_unittest("EventExportDbMgrTest") {
  module_out_path = module_output_path

  configs = [ ":event_db_mgr_test_config" ]

  sources = [ "unittest/common/event_export_db_mgr_test.cpp" ]

  deps = [
    "$hiview_base:hiviewbase_static_lib_for_tdd",
    "../../event_export:event_export_engine",
  ]

  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "relational_store:native_rdb",
  ]
}

config("event_export_mgr_test_config") {
  visibility = [ ":*" ]

  include_dirs = [ "unittest/common" ]

  cflags = []
}

ohos_unittest("EventExportMgrTest") {
  module_out_path = module_output_path

  configs = [ ":event_export_mgr_test_config" ]

  sources = [ "unittest/common/event_export_mgr_test.cpp" ]

  deps = [
    "$hiview_base:hiviewbase",
    "../../event_export:event_export_engine",
  ]

  external_deps = [
    "ability_base:zuri",
    "cJSON:cjson",
    "data_share:datashare_consumer",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "jsoncpp:jsoncpp",
    "relational_store:native_rdb",
  ]

  resource_config_file = "resource/ohos_test.xml"
}

ohos_unittest("EventExportWriteTest") {
  module_out_path = module_output_path

  configs = [ ":event_export_mgr_test_config" ]

  sources = [ "unittest/common/event_export_write_test.cpp" ]

  deps = [
    "$hiview_base:hiviewbase",
    "../../event_export:event_export_engine",
  ]

  external_deps = [
    "ability_base:zuri",
    "cJSON:cjson",
    "data_share:datashare_consumer",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "relational_store:native_rdb",
  ]
}

ohos_unittest("TriggleExportTest") {
  module_out_path = module_output_path

  configs = [ ":event_export_mgr_test_config" ]

  sources = [ "unittest/common/triggle_export_test.cpp" ]

  deps = [
    "$hiview_base:hiviewbase",
    "../../event_export:event_export_engine",
  ]

  external_deps = [
    "ability_base:zuri",
    "cJSON:cjson",
    "data_share:datashare_consumer",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "jsoncpp:jsoncpp",
    "relational_store:native_rdb",
  ]
}