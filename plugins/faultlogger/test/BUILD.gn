# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//base/hiviewdfx/hiview/hiview.gni")
import("//build/test.gni")

module_output_path = hiview_module + "/faultlogger"

config("hiview_faultlogger_test_config") {
  visibility = [ ":*" ]

  include_dirs = [
    ".",
    "$hiview_core",
    "$hiview_faultlogger/service/",
    "$hiview_faultlogger/service/fault_event/base",
    "$hiview_faultlogger/service/fault_event/factory",
    "$hiview_faultlogger/service/fault_event/event",
    "$hiview_faultlogger/service/fault_file",
    "$hiview_faultlogger/service/sanitizer_collector/",
    "$hiview_faultlogger/service/sanitizer_collector/gwp_asan",
    "$hiview_faultlogger/service/idl/include/",
    "common",
    "common/unittest",
  ]

  cflags_cc = [ "-DUNITTEST" ]
}

ohos_unittest("FaultloggerUnittest") {
  module_out_path = module_output_path

  defines = [ "UNIT_TEST" ]

  configs = [ ":hiview_faultlogger_test_config" ]

  cflags = [ "-Dprivate=public" ]
  sources = [
    "$hiview_faultlogger/service/fault_event/base/faultlog_event_base.cpp",
    "$hiview_faultlogger/service/fault_event/base/faultlog_processor_base.cpp",
    "$hiview_faultlogger/service/fault_event/event/faultlog_cjerror.cpp",
    "$hiview_faultlogger/service/fault_event/event/faultlog_cppcrash.cpp",
    "$hiview_faultlogger/service/fault_event/event/faultlog_error_reporter.cpp",
    "$hiview_faultlogger/service/fault_event/event/faultlog_events_processor.cpp",
    "$hiview_faultlogger/service/fault_event/event/faultlog_freeze.cpp",
    "$hiview_faultlogger/service/fault_event/event/faultlog_jserror.cpp",
    "$hiview_faultlogger/service/fault_event/event/faultlog_rust_panic.cpp",
    "$hiview_faultlogger/service/fault_event/event/faultlog_sanitizer.cpp",
    "$hiview_faultlogger/service/fault_event/event/freeze_json_generator.cpp",
    "$hiview_faultlogger/service/fault_event/factory/faultlog_event_factory.cpp",
    "$hiview_faultlogger/service/fault_event/factory/faultlog_processor_factory.cpp",
    "$hiview_faultlogger/service/fault_file/faultlog_bootscan.cpp",
    "$hiview_faultlogger/service/fault_file/faultlog_database.cpp",
    "$hiview_faultlogger/service/fault_file/faultlog_dump.cpp",
    "$hiview_faultlogger/service/fault_file/faultlog_formatter.cpp",
    "$hiview_faultlogger/service/fault_file/faultlog_manager.cpp",
    "$hiview_faultlogger/service/faultlog_manager_service.cpp",
    "$hiview_faultlogger/service/faultlogger.cpp",
    "common/faultevent_listener.cpp",
    "common/unittest/faultlog_bundle_util_unittest.cpp",
    "common/unittest/faultlog_formatter_unittest.cpp",
    "common/unittest/faultlogger_unittest.cpp",
  ]

  if (!use_clang_coverage) {
    sources += [ "common/unittest/rom_baseline.cpp" ]
  }

  cflags_cc = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  deps = [
    "$hiview_base:hiviewbase_static_lib_for_tdd",
    "$hiview_base/event_publish:hiview_event_publish",
    "$hiview_core:hiview_core_for_test",
    "$hiview_framework/native/unified_collection:ucollection_source",
    "$hiview_plugin/faultlogger/common:faultlogger_common",
    "$hiview_plugin/faultlogger/common:log_analyzer",
    "$hiview_plugin/faultlogger/service/idl:faultlogger_service_impl",
    "$hiview_plugin/faultlogger/service/idl:faultlogger_service_ohos_common",
  ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "faultloggerd:crash_exception",
    "ffrt:libffrt",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hisysevent:libhisyseventmanager",
    "init:libbegetutil",
    "ipc:ipc_single",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
  ]

  resource_config_file = "//base/hiviewdfx/hiview/plugins/faultlogger/test/common/resource/ohos_test.xml"
}

ohos_unittest("FaultloggerClientUnittest") {
  module_out_path = module_output_path

  configs = [ ":hiview_faultlogger_test_config" ]

  sources = [
    "common/faultlogger_client_test.cpp",
    "common/unittest/faultlogger_client_unittest.cpp",
  ]

  deps = [
    "$hiview_base:hiviewbase_static_lib_for_tdd",
    "$hiview_faultlogger:libfaultlogger",
  ]

  external_deps = [
    "googletest:gtest_main",
    "hilog:libhilog",
  ]
}

ohos_unittest("AsanUnittest") {
  module_out_path = module_output_path

  configs = [ ":hiview_faultlogger_test_config" ]

  sources = [ "common/unittest/asan_unittest.cpp" ]

  deps = [
    "$hiview_base/utility:hiview_utility",
    "$hiview_faultlogger:libfaultlogger",
    "$hiview_faultlogger/service/sanitizer_collector/gwp_asan:libasan_logger",
  ]

  external_deps = [ "googletest:gtest_main" ]
}

ohos_unittest("FreezeJsonGeneratorUnittest") {
  module_out_path = module_output_path

  configs = [ ":hiview_faultlogger_test_config" ]

  sources = [ "common/unittest/freeze_json_generator_unittest.cpp" ]

  deps = [
    "$hiview_base:hiviewbase_static_lib_for_tdd",
    "$hiview_faultlogger:libfaultlogger",
    "$hiview_faultlogger/service:faultlogger_service",
  ]
  external_deps = [
    "googletest:gtest_main",
    "hilog:libhilog",
  ]
}
