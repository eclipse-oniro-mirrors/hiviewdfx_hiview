# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//base/hiviewdfx/hiview/hiview.gni")
import("//build/ohos.gni")

ohos_source_set("faultlogger_service") {
  part_name = "hiview"
  include_dirs = [
    ".",
    "$hiview_plugin/faultlogger/common",
    "$hiview_plugin/faultlogger/service/fault_event/event",
    "$hiview_plugin/faultlogger/service/fault_event/factory",
    "$hiview_plugin/faultlogger/service/fault_event/base",
    "$hiview_plugin/faultlogger/service/fault_file",
    "$hiview_plugin/faultlogger/service/sanitizer_collector",
    "$hiview_framework/native/unified_collection/process/include",
  ]

  sources = [
    "fault_event/base/faultlog_event_base.cpp",
    "fault_event/base/faultlog_processor_base.cpp",
    "fault_event/event/faultlog_cjerror.cpp",
    "fault_event/event/faultlog_cppcrash.cpp",
    "fault_event/event/faultlog_error_reporter.cpp",
    "fault_event/event/faultlog_events_processor.cpp",
    "fault_event/event/faultlog_freeze.cpp",
    "fault_event/event/faultlog_jserror.cpp",
    "fault_event/event/faultlog_rust_panic.cpp",
    "fault_event/event/faultlog_sanitizer.cpp",
    "fault_event/event/freeze_json_generator.cpp",
    "fault_event/factory/faultlog_event_factory.cpp",
    "fault_event/factory/faultlog_processor_factory.cpp",
    "fault_file/faultlog_bootscan.cpp",
    "fault_file/faultlog_database.cpp",
    "fault_file/faultlog_dump.cpp",
    "fault_file/faultlog_formatter.cpp",
    "fault_file/faultlog_manager.cpp",
    "faultlog_manager_service.cpp",
    "faultlogger.cpp",
    "sanitizer_collector/sanitizer_telemetry.cpp",
  ]

  deps = [
    "$hiview_base:hiviewbase",
    "$hiview_interfaces/inner_api/unified_collection/utility:libucollection_utility",
    "$hiview_plugin/faultlogger/common:faultlogger_common",
    "$hiview_plugin/faultlogger/common:log_analyzer",
    "idl:faultlogger_service_impl",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "faultloggerd:crash_exception",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:libhitracechain",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_source_set("faultlogger_service_with_cfi") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  part_name = "hiview"
  include_dirs = [
    ".",
    "$hiview_plugin/faultlogger/common",
    "$hiview_plugin/faultlogger/service/fault_event/event",
    "$hiview_plugin/faultlogger/service/fault_event/factory",
    "$hiview_plugin/faultlogger/service/fault_event/base",
    "$hiview_plugin/faultlogger/service/fault_file",
    "$hiview_plugin/faultlogger/service/sanitizer_collector",
    "$hiview_framework/native/unified_collection/process/include",
  ]

  sources = [
    "fault_event/base/faultlog_event_base.cpp",
    "fault_event/base/faultlog_processor_base.cpp",
    "fault_event/event/faultlog_cjerror.cpp",
    "fault_event/event/faultlog_cppcrash.cpp",
    "fault_event/event/faultlog_error_reporter.cpp",
    "fault_event/event/faultlog_events_processor.cpp",
    "fault_event/event/faultlog_freeze.cpp",
    "fault_event/event/faultlog_jserror.cpp",
    "fault_event/event/faultlog_rust_panic.cpp",
    "fault_event/event/faultlog_sanitizer.cpp",
    "fault_event/event/freeze_json_generator.cpp",
    "fault_event/factory/faultlog_event_factory.cpp",
    "fault_event/factory/faultlog_processor_factory.cpp",
    "fault_file/faultlog_bootscan.cpp",
    "fault_file/faultlog_database.cpp",
    "fault_file/faultlog_dump.cpp",
    "fault_file/faultlog_formatter.cpp",
    "fault_file/faultlog_manager.cpp",
    "faultlog_manager_service.cpp",
    "faultlogger.cpp",
    "sanitizer_collector/sanitizer_telemetry.cpp",
  ]

  deps = [
    "$hiview_base:hiviewbase",
    "$hiview_interfaces/inner_api/unified_collection/utility:libucollection_utility",
    "$hiview_plugin/faultlogger/common:faultlogger_common_with_cfi",
    "$hiview_plugin/faultlogger/common:log_analyzer_with_cfi",
    "idl:faultlogger_service_impl_with_cfi",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "faultloggerd:crash_exception",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:libhitracechain",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_source_set("faultlogger_service_fuzz_src") {
  part_name = "hiview"
  include_dirs = [
    ".",
    "$hiview_plugin/faultlogger/common",
    "$hiview_plugin/faultlogger/service/fault_event/event",
    "$hiview_plugin/faultlogger/service/fault_event/factory",
    "$hiview_plugin/faultlogger/service/fault_event/base",
    "$hiview_plugin/faultlogger/service/fault_file",
    "$hiview_plugin/faultlogger/service/sanitizer_collector",
    "$hiview_framework/native/unified_collection/process/include",
  ]
  defines = [ "UNIT_TEST" ]
  defines += [ "UNITTEST" ]

  sources = [
    "fault_event/base/faultlog_event_base.cpp",
    "fault_event/base/faultlog_processor_base.cpp",
    "fault_event/event/faultlog_cjerror.cpp",
    "fault_event/event/faultlog_cppcrash.cpp",
    "fault_event/event/faultlog_error_reporter.cpp",
    "fault_event/event/faultlog_events_processor.cpp",
    "fault_event/event/faultlog_freeze.cpp",
    "fault_event/event/faultlog_jserror.cpp",
    "fault_event/event/faultlog_rust_panic.cpp",
    "fault_event/event/faultlog_sanitizer.cpp",
    "fault_event/event/freeze_json_generator.cpp",
    "fault_event/factory/faultlog_event_factory.cpp",
    "fault_event/factory/faultlog_processor_factory.cpp",
    "fault_file/faultlog_bootscan.cpp",
    "fault_file/faultlog_database.cpp",
    "fault_file/faultlog_dump.cpp",
    "fault_file/faultlog_formatter.cpp",
    "fault_file/faultlog_manager.cpp",
    "faultlog_manager_service.cpp",
    "faultlogger.cpp",
    "sanitizer_collector/sanitizer_telemetry.cpp",
  ]

  deps = [
    "$hiview_base:hiviewbase",
    "$hiview_interfaces/inner_api/unified_collection/utility:libucollection_utility",
    "$hiview_plugin/faultlogger/common:faultlogger_common",
    "$hiview_plugin/faultlogger/common:log_analyzer",
    "idl:faultlogger_service_impl",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "bounds_checking_function:libsec_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "faultloggerd:crash_exception",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:libhitracechain",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "jsoncpp:jsoncpp",
    "zlib:libz",
  ]
}
