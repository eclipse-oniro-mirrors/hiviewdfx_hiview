# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/hiviewdfx/hiview/hiview.gni")
import("//build/config/components/idl_tool/idl.gni")
import("//build/ohos.gni")

idl_gen_interface("hiview_service_idl_interface") {
  sources = [ "IHiviewServiceAbility.idl" ]

  log_domainid = "0xD002D10"
  log_tag = "HiviewService"
  subsystem_name = "hiviewdfx"
  part_name = "hiview"
}

config("hiview_service_stub_inner_public_config") {
  include_dirs = [
    "${target_gen_dir}",
    "$hiview_adapter/service/common/include",
  ]
}

ohos_source_set("hiview_service_stub_inner") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }

  public_configs = [ ":hiview_service_stub_inner_public_config" ]

  include_dirs = [
    "$hiview_base/include",
    "$hiview_interfaces/inner_api/unified_collection",
  ]

  output_values = get_target_outputs(":hiview_service_idl_interface")
  sources = filter_include(output_values, [ "*_stub.cpp" ])

  deps = [ ":hiview_service_idl_interface" ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]

  part_name = "hiview"
  subsystem_name = "hiviewdfx"
}

config("hiview_service_proxy_public_config") {
  include_dirs = [
    "${target_gen_dir}",
    "$hiview_adapter/service/common/include",
  ]
}

ohos_source_set("hiview_service_proxy") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }

  public_configs = [ ":hiview_service_proxy_public_config" ]

  include_dirs = [
    "$hiview_base/include",
    "$hiview_interfaces/inner_api/unified_collection",
  ]

  output_values = get_target_outputs(":hiview_service_idl_interface")
  sources = filter_include(output_values, [ "*_proxy.cpp" ])
  sources += [
    "../common/src/app_caller_parcelable.cpp",
    "../common/src/hiview_file_info.cpp",
    "../common/src/memory_caller_parcelable.cpp",
  ]

  deps = [ ":hiview_service_idl_interface" ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]

  part_name = "hiview"
  subsystem_name = "hiviewdfx"
}

config("hiview_service_ability_config") {
  visibility = [ "*:*" ]

  include_dirs = [
    "include",
    "$hiview_adapter/service/common/include",
    "$hiview_base/utility/include",
    "$hiview_service",
  ]
}

ohos_source_set("hiview_service_impl_for_unified_collection") {
  public_configs = [ ":hiview_service_ability_config" ]

  include_dirs = [
    "$hiview_base/include",
    "$hiview_interfaces/inner_api/unified_collection",
  ]

  sources = [
    "src/hiview_remote_service.cpp",
    "src/hiview_service_cpu_delegate.cpp",
    "src/hiview_service_memory_delegate.cpp",
    "src/hiview_service_trace_delegate.cpp",
  ]

  deps = [ "$hiview_adapter/service/client:hiview_service_proxy" ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_acl",
  ]

  part_name = "hiview"

  subsystem_name = "hiviewdfx"
}
